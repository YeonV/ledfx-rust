name: Universal Cross-Platform Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # --- JOB 1: Build for Desktop (Windows, macOS, Linux) ---
  build-desktop:
    name: Build Desktop - ${{ matrix.platform }}
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Install frontend dependencies (Yarn)
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      # --- THE DEFINITIVE FIX: Sync Version using jq ---
      - name: Sync Version to tauri.conf.json
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          jq --argjson version "\"$PACKAGE_VERSION\"" '.package.version = $version' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
      
      - name: Build the application
        run: yarn tauri build
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: desktop-artifacts-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/dmg/*.dmg

  # --- JOB 2: Build for Android ---
  build-android:
    name: Build Android APK
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Add Android targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25b
      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Sync Version to tauri.conf.json
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          jq --argjson version "\"$PACKAGE_VERSION\"" '.package.version = $version' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
      - name: Initialize Tauri Android project
        run: yarn tauri android init
        env:
          ANDROID_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Build Android APK
        run: |
          unset ANDROID_SDK_ROOT
          yarn tauri android build
        env:
          ANDROID_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-artifact
          path: src-tauri/gen/android/app/build/outputs/apk/release/*.apk

  # --- JOB 3: Build for Raspberry Pi (ARM Linux) ---
  build-raspberry-pi:
    name: Build Raspberry Pi (ARM64)
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install frontend dependencies (Yarn)
        run: yarn install --frozen-lockfile
        
      - name: Sync Version to tauri.conf.json
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          jq --argjson version "\"$PACKAGE_VERSION\"" '.package.version = $version' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
          
      # --- THE DEFINITIVE FIX: Use the official Tauri Action ---
      - name: Build Raspberry Pi AppImage using Tauri Action
        uses: tauri-apps/tauri-action@v0
        with:
          # This tells the action which target to build for.
          # It handles all the complex cross-compilation setup internally.
          target: aarch64-unknown-linux-gnu
          
      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpi-artifact
          path: "**/src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage"

  # --- JOB 4: Build for iOS (Skipped) ---
  build-ios:
    name: Build iOS IPA (Skipped)
    if: false
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Add iOS targets
        run: rustup target add aarch64-apple-ios x86_64-apple-ios
      - name: Install frontend dependencies (Yarn)
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Install Apple certificate and provisioning profile
        # TODO: This is the complex part. You need to add your certs/profiles as secrets.
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      - name: Build iOS App
        run: yarn tauri ios build
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifact
          path: src-tauri/gen/apple/build/release/*.ipa

  # --- FINAL JOB: Create the Release ---
  create-release:
    name: Create GitHub Release
    if: startsWith(github.event.head_commit.message, 'Release') && (needs.build-desktop.result == 'success' || needs.build-android.result == 'success' || needs.build-raspberry-pi.result == 'success')
    needs: [build-desktop, build-android, build-raspberry-pi, build-ios]
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate Changelog File
        id: generate_changelog_file
        run: |
          echo "## Changes in v${{ steps.get_version.outputs.VERSION }}" > changelog.md
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%h))" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> changelog.md
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: changelog.md
          # This will upload any artifacts that were successfully created
          files: |
            artifacts/**/*