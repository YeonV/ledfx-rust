name: Universal Cross-Platform Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # --- This is the ONLY build job. It uses the official Tauri Action. ---
  build-tauri:
    name: Build - ${{ matrix.platform }}
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "yarn"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile

      # --- THE DEFINITIVE FIX: Use the official Tauri Action for ALL builds ---
      - name: Build Application using Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The action will automatically detect the platform (macOS, Linux, Windows)
          # and build the correct distributable (.dmg, .AppImage, .msi).
          # It also handles installing Linux dependencies for us.
          distPath: ../dist # This is a common requirement for the action
          
  # --- JOB for Raspberry Pi (This still needs a separate setup) ---
  build-raspberry-pi:
    name: Build Raspberry Pi (ARM64)
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
      - name: Build Raspberry Pi AppImage using Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target: aarch64-unknown-linux-gnu
          distPath: ../dist

  # --- JOB for Android ---
  build-android:
    name: Build Android APK
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
      - name: Build Android APK using Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --target aarch64-linux-android # Example for 64-bit ARM
          distPath: ../dist

  # --- FINAL JOB: Create the Release ---
  create-release:
    name: Create GitHub Release
    if: startsWith(github.event.head_commit.message, 'Release')
    needs: [build-desktop, build-raspberry-pi, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate Changelog File
        id: generate_changelog_file
        run: |
          echo "## Changes in v${{ steps.get_version.outputs.VERSION }}" > changelog.md
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%h))" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> changelog.md
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: changelog.md
          # This will upload any artifacts that were successfully created
          files: |
            artifacts/**/*