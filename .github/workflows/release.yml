name: Builder

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # --- Build for Desktop ---
  build-desktop:
    name: Build ${{ matrix.pretty_name }}
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            pretty_name: MacOS
          - platform: windows-latest
            pretty_name: Windows
          - platform: ubuntu-22.04
            pretty_name: Linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            webkit2gtk-4.1
      - name: Install frontend dependencies (Yarn)
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Sync Version to tauri.conf.json
        shell: bash
        run: |
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const tauriConfPath = './src-tauri/tauri.conf.json';
            const tauriConf = JSON.parse(fs.readFileSync(tauriConfPath, 'utf8'));
            tauriConf.version = packageJson.version;
            fs.writeFileSync(tauriConfPath, JSON.stringify(tauriConf, null, 2));
          "
      - name: Build the application
        run: yarn tauri build
      - name: Rename Artifacts
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv src-tauri/target/release/bundle/msi/*.msi src-tauri/target/release/bundle/msi/LedFx-rust_${VERSION}_windows.msi
          elif [ "${{ runner.os }}" == "Linux" ]; then
            mv src-tauri/target/release/bundle/appimage/*.AppImage src-tauri/target/release/bundle/appimage/LedFx-rust_${VERSION}_linux.AppImage
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mv src-tauri/target/release/bundle/dmg/*.dmg src-tauri/target/release/bundle/dmg/LedFx-rust_${VERSION}_mac.dmg
          fi
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: desktop-artifacts-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/msi/LedFx-rust_*.msi
            src-tauri/target/release/bundle/appimage/LedFx-rust_*.AppImage
            src-tauri/target/release/bundle/dmg/LedFx-rust_*.dmg

  # --- RASPBERRY PI BUILD ---
  build-rpi-native:
    name: Build Raspberry Pi
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install ARM64 system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            xdg-utils
      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Sync Version to tauri.conf.json
        shell: bash
        run: |
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const tauriConfPath = './src-tauri/tauri.conf.json';
            const tauriConf = JSON.parse(fs.readFileSync(tauriConfPath, 'utf8'));
            tauriConf.version = packageJson.version;
            fs.writeFileSync(tauriConfPath, JSON.stringify(tauriConf, null, 2));
          "
      - name: Build the application natively
        run: yarn tauri build
      - name: Rename Artifact
        run: mv src-tauri/target/release/bundle/appimage/*.AppImage src-tauri/target/release/bundle/appimage/LedFx-rust_${{ steps.get_version.outputs.VERSION }}_raspberry.AppImage
      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpi-native-artifact
          path: src-tauri/target/release/bundle/appimage/LedFx-rust_*.AppImage

  # --- ANDROID BUILD ---
  build-android:
    name: Build Android
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
      - name: Install Rust toolchain with Android targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
      - name: Setup Java
        uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25b
      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Sync Version to tauri.conf.json and Cargo.toml
        run: |
          cat << 'EOF' > sync-versions.cjs
          const fs = require('fs');
          const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
          const newVersion = packageJson.version;
          if (typeof newVersion !== 'string' || newVersion.length < 3) {
            throw new Error(`Failed to read a valid version from package.json. Got: ${newVersion}`);
          }
          console.log(`Syncing all files to version: ${newVersion}`);
          const tauriConfPath = './src-tauri/tauri.conf.json';
          let tauriConf = fs.readFileSync(tauriConfPath, 'utf8');
          tauriConf = tauriConf.replace(/"version": "0.0.1"/, `"version": "${newVersion}"`);
          fs.writeFileSync(tauriConfPath, tauriConf);
          const cargoTomlPath = './src-tauri/Cargo.toml';
          let cargoToml = fs.readFileSync(cargoTomlPath, 'utf8');
          cargoToml = cargoToml.replace(/version = "0.0.1"/, `version = "${newVersion}"`);
          fs.writeFileSync(cargoTomlPath, cargoToml);
          EOF
          node sync-versions.cjs
      - name: Generate Android Signing Key
        run: |
          keytool -genkey -v \
            -keystore $RUNNER_TEMP/ledfx-rust-release-key.jks \
            -alias androiddebugkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android \
            -dname "CN=Android Debug,O=Android,C=US"
      - name: Initialize Android project
        run: yarn tauri android init
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
          NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Create Keystore Properties File
        run: |
          echo "storeFile=$RUNNER_TEMP/ledfx-rust-release-key.jks" > src-tauri/gen/android/keystore.properties
          echo "password=android" >> src-tauri/gen/android/keystore.properties
          echo "keyAlias=androiddebugkey" >> src-tauri/gen/android/keystore.properties
      - name: Build Signed Android Project
        run: yarn tauri android build
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
          NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Rename Android Artifacts
        run: |
          mv src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk src-tauri/gen/android/app/build/outputs/apk/universal/release/LedFx-rust_${{ steps.get_version.outputs.VERSION }}_android.apk
          mv src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab src-tauri/gen/android/app/build/outputs/bundle/universalRelease/LedFx-rust_${{ steps.get_version.outputs.VERSION }}_android.aab
      - name: Upload APK and AAB Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            src-tauri/gen/android/app/build/outputs/apk/universal/release/LedFx-rust_*.apk
            src-tauri/gen/android/app/build/outputs/bundle/universalRelease/LedFx-rust_*.aab

  # --- Build for iOS ---
  build-ios:
    name: Build iOS
    if: false
    # if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Add iOS targets
        run: rustup target add aarch64-apple-ios x86_64-apple-ios
      - name: Install frontend dependencies (Yarn)
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Install Apple certificate and provisioning profile
        # TODO: This is the complex part. You need to add your certs/profiles as secrets.
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      - name: Build iOS App
        run: yarn tauri ios build
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifact
          path: src-tauri/gen/apple/build/release/*.ipa

  # --- Create the Release ---
  create-release:
    name: Create Release
    if: always() && startsWith(github.event.head_commit.message, 'Release')
    needs: [build-desktop, build-rpi-native, build-android, build-ios]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate Changelog File
        id: generate_changelog_file
        run: |
          echo "## Changes in v${{ steps.get_version.outputs.VERSION }}" > changelog.md
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%h))" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> changelog.md
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: changelog.md
          files: |
            artifacts/**/*