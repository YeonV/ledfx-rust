name: Universal Cross-Platform Release

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # --- JOB 1: Build for Desktop (Windows, macOS, Linux) ---
  build-desktop:
    name: Build Desktop - ${{ matrix.platform }}
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest, ubuntu-24.04-arm]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # --- THE DEFINITIVE FIX for Ubuntu ---
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            webkit2gtk-4.1

      - name: Install frontend dependencies (Yarn)
        run: yarn install --frozen-lockfile

      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli

      - name: Sync Version to tauri.conf.json
        shell: bash
        run: |
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const tauriConfPath = './src-tauri/tauri.conf.json';
            const tauriConf = JSON.parse(fs.readFileSync(tauriConfPath, 'utf8'));
            tauriConf.version = packageJson.version;
            fs.writeFileSync(tauriConfPath, JSON.stringify(tauriConf, null, 2));
          "

      - name: Build the application
        run: yarn tauri build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: desktop-artifacts-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/dmg/*.dmg

  # --- JOB 2: Build for Android ---
  build-android:
    name: Build Android APK
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          # Path where NDK version 27.0.11902837 is expected to be installed by setup-android
          path: /usr/local/lib/android/sdk/ndk/27.0.11902837
          key: ndk-${{ runner.os }}-27.0.11902837

      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 12266719 # v16

      - name: Install NDK
        run: sdkmanager "ndk;27.0.11902837"

        id: setup-ndk

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android

      # - name: Cache Rust dependencies
      #   uses: swatinem/rust-cache@v2

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Sync Version to tauri.conf.json
        shell: bash
        run: |
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const tauriConfPath = './src-tauri/tauri.conf.json';
            const tauriConf = JSON.parse(fs.readFileSync(tauriConfPath, 'utf8'));
            tauriConf.version = packageJson.version;
            fs.writeFileSync(tauriConfPath, JSON.stringify(tauriConf, null, 2));
          "
      - name: Initialize Tauri Android project
        # We must provide the ANDROID_HOME and NDK_HOME environment variables
        run: yarn tauri android init
        env:
          ANDROID_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      # - name: setup Android signing
      #   run: |
      #     cd src-tauri/gen/android
      #     echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
      #     echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
      #     base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
      #     echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
      #     echo "Keystore properties created."
      #     cd ../../.. # Go back to root

      - name: Build Android APK
        run: yarn tauri android build
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-artifact
          path: src-tauri/gen/android/app/build/outputs/apk/release/*.apk

  # --- JOB 3: Build for Raspberry Pi (ARM Linux) ---
  build-raspberry-pi:
    name: Build Raspberry Pi (ARM64)
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      # - name: Install cross-compilation tool
      #   uses: taiki-e/install-action@cross
      
      # --- THE DEFINITIVE FIX for RPi ---
      - name: Install ARM64 system dependencies
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y 
        # libwebkit2gtk-4.0-dev:arm64 \
        # libgtk-3-dev:arm64 \
        # libappindicator3-dev:arm64 \
        # librsvg2-dev:arm64 \
        # libsoup-3.0-dev:arm64 \
        # libjavascriptcoregtk-4.1-dev:arm64 \
        # libgirepository1.0-dev:arm64 \
        # libglib2.0-dev:arm64

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      - name: Sync Version to tauri.conf.json
        shell: bash
        run: |
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const tauriConfPath = './src-tauri/tauri.conf.json';
            const tauriConf = JSON.parse(fs.readFileSync(tauriConfPath, 'utf8'));
            tauriConf.version = packageJson.version;
            fs.writeFileSync(tauriConfPath, JSON.stringify(tauriConf, null, 2));
          "
      - name: Build the application for ARM64 using cross
        run: yarn tauri build --target aarch64-unknown-linux-gnu
      - name: Manually bundle with Tauri CLI
        run: yarn tauri build --bundles appimage --target aarch64-unknown-linux-gnu
      - name: Upload AppImage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpi-artifact
          path: src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage

  # --- JOB 4: Build for iOS (Skipped) ---
  build-ios:
    name: Build iOS IPA (Skipped)
    if: false
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate Changelog File
        id: generate_changelog_file
        run: |
          echo "## Changes in v${{ steps.get_version.outputs.VERSION }}" > changelog.md
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%h))" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> changelog.md
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: changelog.md
          files: |
            artifacts/**/*


  # --- FINAL JOB: Create the Release ---
  create-release:
    name: Create GitHub Release
    if: always() && startsWith(github.event.head_commit.message, 'Release')
    needs: [build-desktop, build-android, build-raspberry-pi, build-ios]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version from package.json
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate Changelog File
        id: generate_changelog_file
        run: |
          echo "## Changes in v${{ steps.get_version.outputs.VERSION }}" > changelog.md
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%h))" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> changelog.md
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: changelog.md
          files: |
            artifacts/**/*