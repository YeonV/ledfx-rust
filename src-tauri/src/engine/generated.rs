// This file is auto-generated by build.rs. Do not edit manually.

use crate::effects;
use serde::{Deserialize, Serialize};
use specta::Type;
use super::EffectInfo;

#[derive(Deserialize, Serialize, Type, Clone, Debug)]
#[serde(tag = "type", content = "config")]
pub enum EffectConfig {
    #[serde(rename = "blade_power")]
    BladePower(effects::blade_power::BladePowerConfig),
    #[serde(rename = "scan")]
    Scan(effects::scan::ScanConfig),
}

#[tauri::command]
#[specta::specta]
pub fn get_available_effects() -> Result<Vec<EffectInfo>, String> {
    Ok(vec![
        EffectInfo { id: "blade_power".to_string(), name: effects::blade_power::NAME.to_string() },
        EffectInfo { id: "scan".to_string(), name: effects::scan::NAME.to_string() },
    ])
}

#[tauri::command]
#[specta::specta]
pub fn get_effect_schema(effect_id: String) -> Result<Vec<effects::schema::EffectSetting>, String> {
    match effect_id.as_str() {
        "blade_power" => Ok(effects::blade_power::get_schema()),
        "scan" => Ok(effects::scan::get_schema()),
        _ => Err(format!("Schema not found for effect: {}", effect_id)),
    }
}

pub fn create_effect(config: EffectConfig) -> Box<dyn effects::Effect> {
    match config {
        EffectConfig::BladePower(c) => Box::new(effects::blade_power::BladePower::new(c)),
        EffectConfig::Scan(c) => Box::new(effects::scan::Scan::new(c)),
    }
}
